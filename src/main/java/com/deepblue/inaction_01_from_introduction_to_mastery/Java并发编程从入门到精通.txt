************************************************************************************************************************************************************
******************************************************************** Java并发编程从入门到精通 ****************************************************************
************************************************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第1章 概念部分 --------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
32位和64位概念: 每位的权重是字节, 所以32位表示 可以寻址的空间总大小为 2^32 byte
    寻址总空间大小为: 2^32 字节
    double bytes = Math.pow(2, 32);
    double k_bytes = bytes / 1024;
    double m_bytes = k_bytes / 1024;
    double g_bytes = m_bytes / 1024;
    System.out.println("bytes   = " + bytes  );
    System.out.println("k_bytes = " + k_bytes);
    System.out.println("m_bytes = " + m_bytes);
    System.out.println("g_bytes = " + g_bytes);

CPU核心数和线程数:
    核心数: 是指一个单体芯片内有多少个并行处理器
    线程数: 一般情况下核心数和线程数 = 1:1, 从Intel提出超线程技术后 核心数:线程数 = 1:2

时间片轮转机制: CPU 调度进程的算法

什么是进程, 什么是线程?
    进程的概念:
        进程是操作系统分配资源的最小单位, 操作系统分配的资源包括: CPU核数, 内存区域, 磁盘IO等;
    进程的特性:
        进程与进程之间是相互独立的, 进程分类: 用户进程和系统进程!
    系统进程: 所有用户支撑操作系统运行的进程统称为系统进程
    用户进程: 所有由用户启动的程序所属的进程统称为用户进程

    线程的概念:
        线程是CPU调度的最小单位, 必须依赖于进程存在, 不能单独运行!

    进程和线程的关系, 一个线程只归属于一个进程, 一个进程下可包含多个线程!

    Java中常见的线程: 日常中常见的main函数启动的程序都会对应一个线程!

并行和并发的概念和举例说明:
    并行: 从出发点A 到结束点B 之间有多少条高速公路, 这就叫并行能力
    并发: 从出发点A 到结束点B 之间单条高速公路上 单位时间内通过的车辆数量 叫并发能力


------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- 第2章 Java中的Thread ----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
线程的状态: 参考Thread.java类 中的6种状态 + Running状态 = 7种状态 NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED + RUNNING

实现线程的三种方式:
    1、继承Thread
    2、实现Runnable    最常用的实现线程的方式
    3、实现Callable

线程的优先级: 最小为1, 最大为10, 默认值为5

线程使用的注意事项:
    1、使用新的线程必须要为线程设置一个名称用于监控和查看
    2、主线程和子线程的生命周期极有可能不一致

线程的中断方法: 连续调用多次 interrupt() 方法, 中断标识位不是那么好判断! 总结: 如果中断标识位不发生改变线程无法中断

线程的状态:
    new         创建
    runnable    可执行
    running     执行中
    blocked     阻塞
    dead        消亡

线程常用方法:
    sleep()                 : 释放CPU, 不释放锁
    wait()                  : 释放CPU, 释放锁; 因此只有获取锁的线程才能调用wait()方法, 因此只能在 synchronized 代码块中使用
    notify()/notifyAll()    : 从等待池中唤醒(Waiting Pool), 同样只有获取相同的对象锁才能唤醒否则抛出异常
    yield()                 : 释放CPU, 暂时等待同优先级的线程执行, 如果没有同等优先级的线程, 则方法失效, 线程不等待

守护线程:
    概念: 如果一个线程不用关注它的消亡过程, 一般这种线程都是守护线程, 举例: Java虚拟机的垃圾回收, 内存管理都属于守护线程!
    使用: 在start() 之前调用 setDaemon(true) 方法就OK了
    验证: 守护线程不一定执行完成就有可能退出, 守护线程是不用关注退出的线程!
    注意: JRE判定程序是否执行完成的标准是 前台线程而非所有线程, 尤其不是根据守护进程是否结束来判定!

线程组:
    常见线程组: system线程组, main线程组

线程副本: ThreadLocal
    源码解析:
        ThreadLocal只是一个key, 这里面维护了线程的 ThreadLocalMap 属性, 因此每个线程的同类型的值在同一个ThreadLocal中只能存储一个值!
    使用注意:
        在使用完ThreadLocal后, 注意使用remove进行清除, 防止发生内存泄漏

线程异常的处理:
    CaughtExceptionHandler 接口的实现, 线程启动前注册: 调用setCaughtExceptionHandler(CaughtExceptionHandler handler)

------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- 第3章 线程安全 ----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
CPU处理数据的所经过的部件
    读取过程: 内存 ---> 高速缓存 ---> 寄存器 ---> CPU
    写回过程: CPU ---> 寄存器 ---> 高速缓存 ---> 内存

线程与线程之间不能直接交互数据, 只能通过共享变量的方式进行数据交互

什么是线程不安全:
    前提: 线程A 和 线程B 都能修改 堆中 共享变量C
        1、线程A 修改堆中 共享变量C 的过程对于线程B来说是不可见的, 这种术语叫 可见性
        2、线程A 修改 共享变量C 的过程可能会出现如下情况
            read-load       线程A 的工作内存中 没有 共享变量C的 副本, 则执行 read-load 指令
            read-load-use   线程A 的工作内存中 如果 存在共享变量C的副本, 可能 会重新拉取 堆中 共享变量C 然后再使用
            use             线程A 的工作内存中 如果 存在共享变量C的副本, 可能 会直接使用 工作内存中的副本
           这种问题会造成, 线程A修改 共享变量C 时, 线程B可能已经回写 共享变量值, 造成共享变量 的覆盖而 导致错误
           这种问题术语 时序性

    不安全概念: 由于可见性和时序性 导致共享变量的值 和 预期的值不一致的 效果 叫线程不安全

什么是线程安全:
    无论有多少个线程 对 同一个堆中的 共享变量 执行事务性操作, 产生的结果和我们预期的结果一致, 这就叫 线程安全性

线程安全的实现方式:
    1、不使用单例的共享变量
    2、使用java.util.concurrent.*
    3、使用锁机制 synchronized, lock 机制

隐式锁: synchronized
    主要特点: 同一 object 的 synchronized(this) 修饰的代码块, 排斥其他任何线程, 这种规则同样适用于 其他 对象锁

    隐式锁的执行效率优先级:
    方法块 < 代码块 < 小对象的
    常用方式如下:
    private byte[] lock = new byte[1];
    public void methodA() {
        synchronized(lock) {
            ...
        }
    }

显示锁: Lock 和 ReentrantLock

显示锁: ReadWriteLock 和 ReentrantReadWriteLock
    公平性: 默认的 非公平锁; 公平锁: 使用AQS的CLH 队列实现
    重入性:
    重入数: 最大是65535
    锁降级: 从 写锁 降级为 读锁, 自动完成
    锁升级: 从 读锁 升级为 写锁, 不能自动完成, 因为升级写锁之前 要 释放掉所有的 读锁
    条件变量: 只有写锁有条件, 读锁没有公平和非公平性
    使用场景: 读取线程多, 写入线程少 的时候!
    总结:
        读-读: 不互斥
        读-写: 互斥
        写-写: 互斥


悲观锁: 假定会发生并发问题, 会破坏数据的完整性; 在读取之前就验证一下数据是否正在被修改!
乐观锁: 假定不会发生并发问题, 只是在提交修改的时候检查是否违反了数据完整性!

什么是死锁: 当线程A 和 线程B 都在等待对方释放锁才能继续工作时, 而产生共同阻塞的情况 称为 死锁!

volatile: 指的是线程每次读取变量 都是从 栈内存中读取, 但不能保证 每次都写回栈内存中, 因此可以做到 栈内存的可见性, 但是不能保证原子性, 所以高并发的情况下是线程不安全的!

volatile 和 锁 的区别: 前者只能保证内存可见性, 但是不能保证原子性! 后者即能保证可见性, 也能保证原型性!

------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- 第4章 线程安全的集合类 ----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
Hashtable                       默认加载因子为 0.75, key 和 value 都不能为 null, 且是线程安全的, 内部方法使用的 synchronized 来给方法加锁的!
ConcurrentHashMap               使用 Segment 分段加锁的方式进行管理, 内部使用 ReentrantLock 来加锁, 效率比 Hashtable 高多了
CopyOnWriteArrayList            使用复制副本的方式添加元素, 然后让引用指向副本! A ---> add元素 ---> A副本  ---> 向A副本中添加元素 ---> 引用指向A副本; 使用的锁为 ReentrantLock
CopyOnWriteArraySet             在CopyOnWriteArrayList 上使用了 decorator 模式
Vector                          使用synchronized 给每个方法来加锁
StringBuffer 和 StringBuilder　　StringBuffer 是使用synchronized 来加锁　是线程安全的, StringBuilder 是线程不安全的类!

CopyOnWrite 机制介绍:
    CopyOnWrite容器: 写时复制容器!
    实现原理: 当发生写(增、删、改)时, 复制一个当前容器的副本, 使用这个副本来添加, 然后将引用指向当前的副本! 读写分离的思想!
    主要特征: 不能保证实时性, 但能保证数据的最终一致性和安全性


------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------- 第5章 多线程之间的交互: 线程阀 ---------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
Queue 队列的特点 先进先出的特点, 不知道请参考 数据结果 一书, 熟悉一下几种 Queue
    ArrayBlockingQueue     :   必须初始化容量大小
    LinkedBlockingQueue    :   没有容量的限制, 这块使用时一定要注意 消费的速度一定要 大于 生产的速度
    PriorityBlockingQueue  :   TODO 书中没有给出特定的案例, 这里记一下, 后续书籍中应该有介绍
    DelayQueue             :   表示一个延时队列, 特别注意 DelayExample 中的 getDelay(TimeUnit unit) 方法的实现:
                               getDelay(TimeUnit unit) 返回值:
                                  大于零　　 : 表示在延迟阶段,   在这个阶段中获取数据 返回元素为 null
                                  小于等于零 : 表示不在延迟阶段, 在这个阶段获取数据 则能获取到该元素
    SynchronousQueue       :   不存储任何元素的队列, 一个put, 一个get() 这样的顺序执行!

同步计数器:
    CountDownLatch   :  多个线程同时开始                        TODO 卡的是 当前线程何时开始执行
    Semaphore        :  最多能多少个线程同时运行                 TODO 卡的是 同时执行线程的数量
    CyclicBarrier    :  多个线程都结束后, 才能进行下一个指定的线程 TODO 卡的是 多线程都必须执行完成 才能进行下一阶段

同步基石类:  AbstractQueuedSynchronizer
    其重要性: 是同步思想单位正交基!
    维护状态: 内部维护了一个 int 类型的状态
    核心方法: AbstractQueuedSynchronizer.getState, AbstractQueuedSynchronizer.setState, AbastractQueuedSynchronizer.compareAndSetState
    tryAcquire			排他模式下 尝试获取
    tryRelease		    排他模式下 尝试释放
    tryAcquireShared	共享模式下 尝试获取共享
    tryReleaseShared	共享模式下 尝试释放共享
    isHeldExclusively	是否支持独占

    具体看自己复制的一份 AbstractQueuedSynchronizer 类中的注释 翻译!

    AbstractQueuedSynchronizer 中的 state 字段在不同锁中的含义:
        在 ReentrantLock 中 表示重入的次数!
        在 Semaphore     中 表示剩余信号量的个数!

------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------- 第6章 线程池 -------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
什么是线程池?
    Executors 线程池工厂类! 当前工厂类提供的三种方法如下:
    newSingleThreadExecutor     创建只包含单线程的线程池        内部使用 LinkedBlockingQueue        DefaultThreadFactory    DefaultHandler
    newCachedThreadPool         创建一个可以缓存的线程池        内部使用 SynchronousQueue           DefaultThreadFactory    DefaultHandler
    newFixedThreadPool          创建包含固定数量的线程池        内部使用 LinkedBlockingQueue        DefaultThreadFactory    DefaultHandler

ThreadPoolExecutor 源码解析:
    /**
     * 用于保存任务和移交给工作线程的队列。
     * The queue used for holding tasks and handing off to worker threads.
     *
     * 当前场景下, 我们不支持 workQueue.poll() 返回 null 的使用方式, 如果返回 null 必然意味着 workQueue.isEmpty()，所以只依赖 isEmpty 来查看队列是否为空（例如，在决定是否从 SHUTDOWN 转换到 TIDYING 时我们必须这样做） .
     * We do not require that workQueue.poll() returning null necessarily means that workQueue.isEmpty(), so rely solely on isEmpty to see if the queue is empty (which we must do for example when deciding whether to transition from SHUTDOWN to TIDYING).
     *
     * 这适用于特殊用途的队列，例如允许 poll() 返回 null 的 DelayQueues，即使它稍后可能在延迟到期时返回非 null。
     * This accommodates special-purpose queues such as DelayQueues for which poll() is allowed to return null even if it may later return non-null when delays expire.
     */
    private final BlockingQueue<Runnable> workQueue;

    /**
     * 包含池中所有工作线程的集合。 仅在持有 mainLock 时访问。
     * Set containing all worker threads in pool. Accessed only when holding mainLock.
     */
    private final HashSet<Worker> workers = new HashSet<Worker>();


    /**
     * 使用 给定的初始参数和默认线程工厂 以及 被拒绝的执行处理程序 创建一个新的 {@code ThreadPoolExecutor}。
     * Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default thread factory and rejected execution handler.
     *
     * 使用 {@link Executors} 工厂方法之一代替此通用构造函数可能更方便。
     * It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor.
     *
     * @param corePoolSize
     * 		要保留在池中的线程数，即使它们处于空闲状态，除非设置了 {@code allowCoreThreadTimeOut}
     * 		the number of threads to keep in the pool, even if they are idle, unless {@code allowCoreThreadTimeOut} is set
     *
     * @param maximumPoolSize
     * 		池中允许的最大线程数
     * 		the maximum number of threads to allow in the pool
     *
     * @param keepAliveTime
     *		当线程数大于 corePoolSize 时，这是多余的空闲线程在终止前等待新任务的最长时间。
     * 		when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.
     *
     * @param unit
     * 		{@code keepAliveTime} 参数的时间单位
     * 		the time unit for the {@code keepAliveTime} argument
     *
     * @param workQueue
     * 		用于在执行任务之前保存任务的队列。
     * 		the queue to use for holding tasks before they are executed.
     *
     * 		该队列将仅保存由 {@code execute} 方法提交的 {@code Runnable} 任务。
     *      This queue will hold only the {@code Runnable} tasks submitted by the {@code execute} method.
     *
     * @throws IllegalArgumentException if one of the following holds:<br>	如果以下情况之一成立：
     *         {@code corePoolSize < 0}<br>
     *         {@code keepAliveTime < 0}<br>
     *         {@code maximumPoolSize <= 0}<br>
     *         {@code maximumPoolSize < corePoolSize}
     * @throws NullPointerException if {@code workQueue} is null
     *
     * public ThreadPoolExecutor(int corePoolSize,
     * 							 int maximumPoolSize,
     * 							 long keepAliveTime,
     * 							 TimeUnit unit,
     * 							 BlockingQueue<Runnable> workQueue) {
     * 		this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler);
     * }
     *
     * 这个方法中的 this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler) 源码解析如下:
     */

    /**
     * 使用给定的初始参数创建一个新的 {@code ThreadPoolExecutor}。
     * Creates a new {@code ThreadPoolExecutor} with the given initial parameters.
     *
     * @param corePoolSize
     * 		要保留在池中的线程数，即使它们处于空闲状态，除非设置了 {@code allowCoreThreadTimeOut}
     * 		the number of threads to keep in the pool, even if they are idle, unless {@code allowCoreThreadTimeOut} is set
     *
     * @param maximumPoolSize
     * 		池中允许的最大线程数
     * 		the maximum number of threads to allow in the pool
     *
     * @param keepAliveTime
     * 		当线程数大于核心数时，这是多余的空闲线程在终止前等待新任务的最长时间。
     * 		when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.
     *
     * @param unit
     * 		{@code keepAliveTime} 参数的时间单位
     * 		the time unit for the {@code keepAliveTime} argument
     *
     * @param workQueue
     * 		用于在执行任务之前保存任务的队列。
     * 		the queue to use for holding tasks before they are executed.
     *
     *		该队列将仅保存由 {@code execute} 方法提交的 {@code Runnable} 任务。
     *     	This queue will hold only the {@code Runnable} tasks submitted by the {@code execute} method.
     *
     * @param threadFactory
     * 		执行程序创建新线程时使用的工厂
     * 		the factory to use when the executor creates a new thread
     *
     * @param handler
     * 		由于达到线程边界和队列容量而阻塞执行时要使用的处理程序
     * 		the handler to use when execution is blocked because the thread bounds and queue capacities are reached
     *
     * 如果以下情况之一成立 则抛出非法参数异常
     * @throws IllegalArgumentException if one of the following holds:<br>
     *         {@code corePoolSize < 0}<br>
     *         {@code keepAliveTime < 0}<br>
     *         {@code maximumPoolSize <= 0}<br>
     *         {@code maximumPoolSize < corePoolSize}
     *
     * 如果这3个参数中有任意一个为 null, 则抛出空指针异常
     * @throws NullPointerException if {@code workQueue} or {@code threadFactory} or {@code handler} is null
     *
     * public ThreadPoolExecutor(int corePoolSize,
     * 						  	 int maximumPoolSize,
     * 						  	 long keepAliveTime,
     * 						  	 TimeUnit unit,
     * 						  	 BlockingQueue<Runnable> workQueue,
     * 						  	 ThreadFactory threadFactory,
     * 						  	 RejectedExecutionHandler handler)
     * {
     * 		if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0)
     * 			throw new IllegalArgumentException();
     *
     * 		if (workQueue == null || threadFactory == null || handler == null)
     * 			throw new NullPointerException();
     *
     * 		this.acc = System.getSecurityManager() == null ? null : AccessController.getContext();
     * 		this.corePoolSize = corePoolSize;
     * 		this.maximumPoolSize = maximumPoolSize;
     * 		this.workQueue = workQueue;
     * 		this.keepAliveTime = unit.toNanos(keepAliveTime);
     * 		this.threadFactory = threadFactory;
     * 		this.handler = handler;
     * }
     */

线程池带来的好处:
    1、降低资源损耗        例如: 线程重复创建
    2、提高响应速度        例如: 不用创建新的线程, 使用线程池中的空闲线程可立即执行
    3、提高线程的可管理性   例如: 线程池统一调用 execute(Runnable) 执行
    4、防止服务资源耗尽     例如: 内存溢出, CPU资源耗尽等

    线程池中的 new ThreadPoolExecutor() 中的 ThreadFactory 和 RejectedExecutionHandler子类 源码解析

    /**
     * 设计模式: 工厂模式
     * 默认线程工厂 源码解析
     * The default thread factory
     *
     * static class DefaultThreadFactory implements ThreadFactory {
     *         private static final AtomicInteger poolNumber = new AtomicInteger(1);
     *         private final ThreadGroup group;
     *         private final AtomicInteger threadNumber = new AtomicInteger(1);
     *         // 重新定义 线程名称前缀
     *         private final String namePrefix;
     *
     *         DefaultThreadFactory() {
     *             SecurityManager s = System.getSecurityManager();
     *             group = (s != null) ? s.getThreadGroup() :
     *                                   Thread.currentThread().getThreadGroup();
     *             namePrefix = "pool-" +
     *                           poolNumber.getAndIncrement() +
     *                          "-thread-";
     *         }
     *
     *         public Thread newThread(Runnable r) {
     *             // 用到了 线程名称前缀 + threadNumber 格式: pool-poolNumber-thread- + threadNumber
     *             Thread t = new Thread(group, r,
     *                                   namePrefix + threadNumber.getAndIncrement(),
     *                                   0);
     *             if (t.isDaemon())
     *                 t.setDaemon(false);
     *             if (t.getPriority() != Thread.NORM_PRIORITY)
     *                 t.setPriority(Thread.NORM_PRIORITY);
     *             return t;
     *         }
     *     }
     */

    RejectedExecutionHandler 子类源码解析!
    /* Predefined RejectedExecutionHandlers */

    /**
     * TODO 策略1: 不使用线程池 线程来处理任务
     * 一个被拒绝任务的处理程序，它直接在{@code execute}方法的调用线程中运行被拒绝的任务，除非执行器已经关闭，在这种情况下任务将被丢弃。
     * A handler for rejected tasks that runs the rejected task directly in the calling thread of the {@code execute} method, unless the executor has been shut down, in which case the task is discarded.
     */
    public static class CallerRunsPolicy implements RejectedExecutionHandler {
        /**
         * Creates a {@code CallerRunsPolicy}.
         */
        public CallerRunsPolicy() { }

        /**
         * 在调用者的线程中执行任务r，除非执行器已关闭，在这种情况下任务将被丢弃。 TODO 即不依赖线程池, 不用线程池线程执行
         * Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.
         *
         * @param r the runnable task requested to be executed
         * @param e the executor attempting to execute this task
         */
        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
            if (!e.isShutdown()) {
                r.run();
            }
        }
    }

    /**
     * TODO 策略2: 直接抛出异常
     * 抛出 {@code RejectedExecutionException} 的被拒绝任务的处理程序。
     * A handler for rejected tasks that throws a {@code RejectedExecutionException}.
     */
    public static class AbortPolicy implements RejectedExecutionHandler {
        /**
         * Creates an {@code AbortPolicy}.
         */
        public AbortPolicy() { }

        /**
         * Always throws RejectedExecutionException.
         *
         * @param r the runnable task requested to be executed
         * @param e the executor attempting to execute this task
         * @throws RejectedExecutionException always
         */
        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
            throw new RejectedExecutionException("Task " + r.toString() +
                                                 " rejected from " +
                                                 e.toString());
        }
    }

    /**
     * TODO 策略3: 直接丢弃任务
     * 被拒绝任务的处理程序，它默默地丢弃被拒绝的任务。
     * A handler for rejected tasks that silently discards the rejected task.
     */
    public static class DiscardPolicy implements RejectedExecutionHandler {
        /**
         * Creates a {@code DiscardPolicy}.
         */
        public DiscardPolicy() { }

        /**
         * Does nothing, which has the effect of discarding task r.
         *
         * @param r the runnable task requested to be executed
         * @param e the executor attempting to execute this task
         */
        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
        }
    }

    /**
     * TODO 策略4: 丢弃最老的任务
     * 被拒绝任务的处理程序，它会丢弃最旧的未处理请求，然后重试 {@code execute}，除非执行程序关闭，在这种情况下任务将被丢弃。
     * A handler for rejected tasks that discards the oldest unhandled request and then retries {@code execute}, unless the executor is shut down, in which case the task is discarded.
     */
    public static class DiscardOldestPolicy implements RejectedExecutionHandler {
        /**
         * Creates a {@code DiscardOldestPolicy} for the given executor.
         */
        public DiscardOldestPolicy() { }

        /**
         * Obtains and ignores the next task that the executor
         * would otherwise execute, if one is immediately available,
         * and then retries execution of task r, unless the executor
         * is shut down, in which case task r is instead discarded.
         *
         * @param r the runnable task requested to be executed
         * @param e the executor attempting to execute this task
         */
        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
            if (!e.isShutdown()) {
                e.getQueue().poll();
                e.execute(r);
            }
        }
    }

线程池的使用注意点:
    1、线程池一定要保证是单例的, 一定不能在方法中创建线程池及其危险, 错误举例: 在Service 层中的一个方法中有代码 ExecutorService executor = Executors.....() 这是错误的!
    2、线程池不应设置的线程数量非常大, 如果设置的非常大, 在并发量大的时候, 仅仅请求量就把服务器压垮了!
    3、注意死锁的问题

------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------- 第7章 jdk7中的 Fork/Join -------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
认识Future机制 和 FutureTask
    Callable 接口: 这个是实现线程的三种方式中 返回结果的一种方式!
    Future   接口: 该类中的get() 方法在获取到结果之前是阻塞的!
        cancel(boolean mayInterruptRunning) :   如果取消成功 则返回 true, 如果取消失败 则返回 false
            mayInterruptRunning 可以取消正在运行中的任务吗? true 表示 可以取消运行中的任务, false 表示 不可以取消运行中的任务!
                如果设置为 true : 如果任务正在运行中, 如果取消成功返回true, 如果取消失败返回false; 如果任务已经执行完成, 此参数失效, 因任务已经执行完成表示取消失败 返回 false
                如果设置为 false: 如果任务正在运行中, 返回false;                               如果任务已经执行完成, 此参数失效, 因为任务已经执行完成表示取消失败 返回false;

    Future 类源码解析: 请看翻译的 Future.java 类

什么是 Fork / Join 框架:
    认知ForkJoinPool, ForkJoinTask, RecursiveTask, RecursiveAction
    Fork / Join 思想 分治: 分 + 治
    A、框架中使用的类 ForkJoinTask 的子类 RecursiveTask, RecursiveAction
    B、ForkJoinPool 执行 ForkJoinTask


ForkJoinTask 中的异常处理机制:
    使用 isCompletedAbnormally() 方法解释: 是否是不正常的完成! 不正常在当前环境下就是 取消了 或 抛出异常了!

    ForJoinTask task = forkJoinPool.submit();
    if(task.isCompletedAbnormally()) {
        task.getException();
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第8章 线程、线程池在实际互联网项目开发中的应用 ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
1、Servlet 是单例的, 并且只是在启动的时候 init 一次, 所以在使用公共变量 的时候 注意线程安全的问题! 一个请求就是一个线程!

2、线程池该如何使用呢?
    使用线程池就是为了减少线程的频繁创建和销毁的过程, 从而要考虑 单台Server 的极限并发 和 接收请求的极限!
    这种对单台的极限情况一般考虑的问题比较多, 例如CPU核数, 内存大小, 带宽多少, IO, 数据库连接等, 一般是通过压测数据来衡量!

3、如果在我们的业务中正确合理的使用高并发程序:
    了解并发的前提:
    (1) 任务的性质: CPU密集型(偏于计算), IO密集型(偏于磁盘IO交互), 内存密集型(大量使用内存)
        CPU密集型 : 因为占用CPU的时间比较长, 比较消耗CPU 线程池中的数量 最好是 CPU核数 + 1, 不宜超过CPU核数太多!
        IO 密集型 : 因为占用IO的时间比较长, 每个线程消耗CPU不是那么厉害, 就多些线程 尽量让CPU不闲着, 推荐线程池中的线程数量为 2 * CPU核数!
        混合密集型 : 是否能够进行拆分, 拆分成 CPU密集型 + IO密集型; 当然了现实生活中往往是不拆分的, 拆分所带来的工作量不是想法这么简单, 可能伴随很多负责业务!

    (2) 任务的并发数量: 超级高并发, 高并发, 中并发, 小并发
    (3) 任务的执行时间: 长, 中, 短
    (4) 任务的优先级: 高, 中, 低
        优先级的不同可以采用不同优先级的BlockingQueue 例如 PriorityBlockingQueue,
        TODO 特别注意一点, 如果优先级高的线程 一直往 PriorityBlockingQueue 中插入, 优先级低的可能一直得不到执行的机会!

    (5) 任务的依赖性: 是否依赖其他资源 例如 RPC, 数据库资源 等
        举例: 任务中 和 数据库 有事务性操作, 如果等待 数据库操作的 时间越长, 那么CPU闲置的时间就越长, 这时线程数量越多越好, 充分利用CPU闲置时间!

    (6) 任务所属资源的性质: 静态资源, 动态资源
    (7) 业务之间的耦合性: 耦合度高, 耦合度低, 是否能够解耦


------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------- 第9章 线程的监控及其日常工作中如何分析 ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
1、线程池 ThreadPoolExecutor 的监控, 靠继承 ThreadPoolExecutor 来实现3个方法来观察具体的参数, beforeExecute, afterExecute, terminated
2、Fork/Join的监控  没有监控可言, 直接打印了一下 ForkJoinPool
3、Linux环境下监控线程
    (1) top 命令可以直接查出 服务的 进程id
    (2) top -p pid -H 可以查看当前 进程id 下的 所有线程 id 进行查看! 展开后可以按 c 键 展示出是哪个具体的 COMMAND
    (3) 展示出来的线程Id(当前为10进制), 转换为16进制后 和 nid 进行比对就可以 在 jstack 查看 dump 转储文件进行监控了!

    TODO 执行指令 top -p 1995 -H
    [root@localhost ~]# top -p 1995 -H
    top - 01:37:15 up 54 min,  3 users,  load average: 0.05, 0.03, 0.05
    Threads:  15 total,   0 running,  15 sleeping,   0 stopped,   0 zombie
    %Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
    KiB Mem :  1863004 total,  1422636 free,   238736 used,   201632 buff/cache
    KiB Swap:  2097148 total,  2097148 free,        0 used.  1473044 avail Mem

      PID  USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
      1995 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.01 gamma
      2008 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.52 gamma
      2009 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2010 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2011 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2012 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2013 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2014 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2015 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2016 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.07 gamma
      2017 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2018 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma
      2019 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 gamma

    -------------------------------------------------------------------------------------------------------------------------------------------
    TODO 在上面的基础上 按 c 键 后展示 如下:
    top - 01:38:35 up 56 min,  3 users,  load average: 0.01, 0.02, 0.05
    Threads:  15 total,   0 running,  15 sleeping,   0 stopped,   0 zombie
    %Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
    KiB Mem :  1863004 total,  1422636 free,   238736 used,   201632 buff/cache
    KiB Swap:  2097148 total,  2097148 free,        0 used.  1473044 avail Mem

    PID  USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
    2016 root      20   0 1287264  64540   8344 S  0.3  3.5   0:00.20 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    1995 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.01 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2008 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.52 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2009 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2010 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2011 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2012 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2013 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2014 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2015 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2017 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2018 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo
    2019 root      20   0 1287264  64540   8344 S  0.0  3.5   0:00.00 /home/openjdk/hotspot/build_jvm/linux_amd64_compiler2/jvmg/gamma LinuxDemo

