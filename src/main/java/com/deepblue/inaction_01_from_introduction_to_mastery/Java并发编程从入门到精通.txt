************************************************************************************************************************************************************
******************************************************************** Java并发编程从入门到精通 ****************************************************************
************************************************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第1章 概念部分 --------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
32位和64位概念: 每位的权重是字节, 所以32位表示 可以寻址的空间总大小为 2^32 byte
    寻址总空间大小为: 2^32 字节
    double bytes = Math.pow(2, 32);
    double k_bytes = bytes / 1024;
    double m_bytes = k_bytes / 1024;
    double g_bytes = m_bytes / 1024;
    System.out.println("bytes   = " + bytes  );
    System.out.println("k_bytes = " + k_bytes);
    System.out.println("m_bytes = " + m_bytes);
    System.out.println("g_bytes = " + g_bytes);

CPU核心数和线程数:
    核心数: 是指一个单体芯片内有多少个并行处理器
    线程数: 一般情况下核心数和线程数 = 1:1, 从Intel提出超线程技术后 核心数:线程数 = 1:2

时间片轮转机制: CPU 调度进程的算法

什么是进程, 什么是线程?
    进程的概念:
        进程是操作系统分配资源的最小单位, 操作系统分配的资源包括: CPU核数, 内存区域, 磁盘IO等;
    进程的特性:
        进程与进程之间是相互独立的, 进程分类: 用户进程和系统进程!
    系统进程: 所有用户支撑操作系统运行的进程统称为系统进程
    用户进程: 所有由用户启动的程序所属的进程统称为用户进程

    线程的概念:
        线程是CPU调度的最小单位, 必须依赖于进程存在, 不能单独运行!

    进程和线程的关系, 一个线程只归属于一个进程, 一个进程下可包含多个线程!

    Java中常见的线程: 日常中常见的main函数启动的程序都会对应一个线程!

并行和并发的概念和举例说明:
    并行: 从出发点A 到结束点B 之间有多少条高速公路, 这就叫并行能力
    并发: 从出发点A 到结束点B 之间单条高速公路上 单位时间内通过的车辆数量 叫并发能力


------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- 第2章 Java中的Thread ----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
线程的状态: 参考Thread.java类 中的6种状态 + Running状态 = 7种状态
实现线程的三种方式:
    1、继承Thread
    2、实现Runnable
    3、实现Callable

























































































------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第II部分 构建并发程序 --------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第III部分 活跃度性、性能测试 ---------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第IV部分 高级主题 ------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------