------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- 第1章 并发编程的挑战 -----------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
1.1、上下文切换
    CPU通过对不同的线程分配时间片的方式进行计算和运行, 这样就造成线程可能一直占用CPU资源, 这就牵扯到线程的上线文切换!

    1.1.1、多线程一定快吗? 未必, 在超过百万并发的情况下 并发一定快很多!
    1.1.2、如何减少线程上下文的切换
           1、根据数据的Id进行 hash 进行取模, 类似于 总共有10个线程 threadId = 0 ~ 9 则 使用 dataId % 9 = threadId 即可
           2、使用无锁操作 CAS 的编程方式

1.2、死锁

------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------- 第2章 并发机制的底层实现原理 -------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
并发相关的 CPU 相关的术语
    内存屏障　　      一组处理器指令, 保证了操作内存时的执行顺序!
    缓存行　　　      CPU 高速缓存读取主内存的最小单位, 缓存行的大小是2的整数倍!
    缓存行读命中      CPU 在读取主内中的数据时, 因在缓存行中 有相同地址的数据, 这时并不去主内存中去获取, 直接在缓存行中的 进行读取, 这就叫 缓存行读命中!
    缓存行写命中      CPU 向主内存中的写数据时, 因在缓存行中 有相同地址的数据, 这时并不向主内存中去写入, 直接向缓存行中去写, 这就叫 缓存行写命中!
    原子性　　　      一个或者一组不可拆封的操作!

volatile 关键字
    在处理由 volatile 关键字修饰的变量的时候, CPU 和 主内存之间的 操作可以分为两步: -XX:-RestrictContended
    1、处理完成的数据直接写回主内存中!
    2、持有这块数据的所有缓存行直接失效!

synchronized 关键字
    修饰不同的地方锁为不同的对象, 以下为三种使用方式
    1、修饰非静态方法 锁资源为 当前实例对象
    2、修饰静态方法　 锁资源为 当前Class类
    3、修饰代码块　　 锁资源为 括号内的资源

    TODO 在修饰 代码块的时候 根据 javap -verbose CodeDemo.class 可以看出编译出的指令为 monitorenter 和 monitorexit
    TODO 在修饰 方法的时候   并没有 使用 monitorenter 和 monitorexit 指令 但可以用这两条指令进行理解

    通过 对象头 和 MarkWord 结构的示意图中可以知道 对象作为锁的四种状态
    无锁, 偏向锁, 轻量级锁, 重量级锁  锁只能升级不能降级!

    偏向锁相关的 VMOperation 操作
        Java6, Java7 中偏向锁是默认开启的, 但有延迟 可以通过 -XX:BiasedLockingStartupDelay=0 就可消除 偏向锁的延迟了
        关闭偏向锁的VMOperation为 -XX:UseBiasedLocking=false


------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------- 第3章 Java 内存模型 -------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
线程之间进行信息传递的方式有两种: 1、共享内存 2、消息传递

内存屏障 请参考 图片 内存屏障.png 其中内存屏障的种类 有四种
    LoadLoad   Barrier
    LoadStore  Barrier
    StoreLoad  Barrier
    StoreStore Barrier

源代码 到 可执行的指令之间 要经过三次重排序的 过程
    源代码 ---> 编译器优化重排序 ---> 处理器 并行指令重排序 ---> 内存系统重排序 ---> 最终的指令执行序列
    后两者重排序也称之为 处理器重排序 在处理这块的指令重排序时 会加上 内存屏障指令 保证执行的顺序!

happens-before 规则: TODO: 核心点 happens-before 任意后续
    1、一个线程中的每个操作, happens-before 于当前线程的任意后续操作!
    2、针对监视器锁而言, 资源锁的释放 一定 happens-before 下一次 锁的获取
    3、针对 volatile 而言, 对于一个 volatile 的写操作, happens-before 于任意后续 对这个 volatile 变量的读操作! 记住是后续
    4、传递性 A happens-before B, B happens-before C 则 A一定 happens-before C

重排序
    重排序提出的目的: 提高指令并行的能力 加快程序执行的速度!

    单线程下指令重排的例子:
    double pi = 3.14;         // A
    double r  = 1.0;          // B
    double area = pi * r * r; // C

    可能执行的顺序为
    A ---> B ---> C
    B ---> A ---> C

顺序一致性模型 和 as-if-serial 的语义假设!

volatile 内存语义:

    volatile 变量的语义分为两点:
        1、被volatile 修饰的变量 下一次的操作 总能看到最后一次对 volatile 变量的写入操作!
        2、被volatile 修饰的变量 不保证 volatile++ 的这种复合操作 的原子性!

    volatile 变量的指令重排规则: 请查看 volatile变量指令重排规则.png














