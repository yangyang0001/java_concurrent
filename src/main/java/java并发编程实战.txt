------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第I部分 基础 ----------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
第2章: 线程安全
    1、编写线程安全的代码, 就是对数据状态的管理, 通常这个状态是 共享的, 可变的!
    2、一个变量是不是线程安全的, 取决于是否有多个线程共同访问并操作当前变量;
       无论在任何时候, 如果存在一个以上的线程对同一个的共享变量进行操作, 此时必须要用同步来协调多个线程对变量的访问,否则有问题

    任何出现线程安全的状况, 解决方案有以下三种方式: [甚至开发初期就这样设计]
        a、不使用任何跨线程的共享变量。
        b、共享变量不可变的。
        c、任何访问跨线程的共享变量的时候都使用同步。

    线程安全类：线程安全类封装的任何必要的同步, 因此调用方不用加任何同步来确保线程的安全性!

    check then act 检查后再运行的策略

    内部锁
        synchronized块 分为两个部分, 1锁引用的对象   2锁包含的代码块
        每个java对象都可以充当一个同步锁的角色, 这种内置的锁又称为内部锁或监视器锁(monitor locks), 线程获取锁的唯一途径就是进入synchronized包裹的代码块, 释放锁的途径就退出代码块(正常退出或异常退出)

    每个可变的共享变量, 必须由一个确定的锁来保护, 而维护者应该清楚的知道这个锁！

第3章: 共享对象
    最低限度的安全性:
        JVM中的读写操作对于一个变量来说是原子操作的, 这种对于任何一个变量来说都是必须的, 但是最低限度的安全性有例外: 非volatile修饰的double, long类型的变量,
        这种操作也称为非原子性的64位操作

    锁与可见性: 内置锁能够保证被上锁的代码块能够被N个线程可见

    内置锁和volatile的区别: 加锁可以保证可见性与原子性, volatile只能保证可见性！volatile使用要慎重!

    逸出: 一个对象在没有准备好就发布出去就称之为逸出！逸出: 超出的意思!

    不可变对象: 对象一旦创建内部的所有属性都不可以给改变, 即使有final修饰的集合类型其内部的值也不能被改变否则就称为可变的

    Final域: 在java领域中的尽管final域修饰的变量不能修改, 但如果修饰的是引用对象, 引用对象的内部值还是可以修改的造成当前的 final域被修改

第4章: 组合对象



























































































------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第II部分 构建并发程序 --------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第III部分 活跃度性、性能测试 ---------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------- 第IV部分 高级主题 ------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------